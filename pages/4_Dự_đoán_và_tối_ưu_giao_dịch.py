import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import load_model
from tensorflow.keras.losses import MeanSquaredError
import xgboost as xgb
import joblib
import os
from datetime import datetime, timedelta

# Thi·∫øt l·∫≠p trang Streamlit
st.set_page_config(page_title="D·ª± B√°o Gi√° C·ªï Phi·∫øu FPT & CMG", page_icon="üìà", layout="wide")

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üìà H·ªá Th·ªëng D·ª± B√°o Gi√° C·ªï Phi·∫øu FPT & CMG")
st.markdown("**D·ª± b√°o gi√° c·ªï phi·∫øu b·∫±ng m√¥ h√¨nh hybrid LSTM, XGBoost, v√† Meta-model**")

# ƒê·ªãnh nghƒ©a danh s√°ch ƒë·∫∑c tr∆∞ng to√†n c·ª•c
FEATURES_XGB = [
    'Return%', 'MA5', 'MA10', 'Volume_ratio', 'Dividend_Event', 'Meeting_Event', 'Volatility', 'Price_Momentum',
    'T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n V·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)%',
    'T·ª∑ l·ªá l√£i EBIT%',
    'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n gi√° tr·ªã s·ªï s√°ch (P/B)L·∫ßn',
    'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)L·∫ßn',
    'P/SL·∫ßn',
    'T·ª∑ su·∫•t sinh l·ª£i tr√™n v·ªën d√†i h·∫°n b√¨nh qu√¢n (ROCE)%',
    'Thu nh·∫≠p tr√™n m·ªói c·ªï ph·∫ßn (EPS)VNƒê'
]

# Sidebar cho l·ª±a ch·ªçn th√¥ng s·ªë
with st.sidebar:
    st.header("C·∫•u h√¨nh D·ª± B√°o")
    stock_choice = st.selectbox("Ch·ªçn c·ªï phi·∫øu", ["FPT", "CMG"])
    forecast_days = st.slider("S·ªë ng√†y d·ª± b√°o", 1, 30, 7)
    st.markdown("---")
    st.info("H·ªá th·ªëng s·ª≠ d·ª•ng m√¥ h√¨nh hybrid: LSTM, XGBoost, v√† Meta-model.")

# H√†m t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu
@st.cache_data
def load_stock_data(stock_id):
    try:
        # Load main transaction data
        df = pd.read_csv(f"4.2.3 (TARGET) (live & his) {stock_id}_detail_transactions_processed.csv")
        df = df[df['StockID'] == stock_id].copy()
        df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
        df = df.sort_values('Date')
        df['Closing Price'] = df['Closing Price'].str.replace(',', '').astype(float)
        df['Total Volume'] = df['Total Volume'].str.replace(',', '').astype(float)

        # Create features
        df['Return%'] = df['Closing Price'].pct_change() * 100
        df['MA5'] = df['Closing Price'].rolling(window=5).mean()
        df['MA10'] = df['Closing Price'].rolling(window=10).mean()
        df['Volume_ratio'] = df['Total Volume'] / df['Total Volume'].rolling(5).mean()
        df['Volatility'] = df['Closing Price'].pct_change().rolling(window=5).std() * 100
        df['Price_Momentum'] = df['Closing Price'].diff(5)
        df = df.fillna(0)  # ƒêi·ªÅn gi√° tr·ªã thi·∫øu b·∫±ng 0

        # Load event data
        df_dividend = pd.read_csv("3.2 (live & his) news_dividend_issue (FPT_CMG)_processed.csv")
        df_meeting = pd.read_csv("3.3 (live & his) news_shareholder_meeting (FPT_CMG)_processed.csv")
        df_dividend = df_dividend[df_dividend['StockID'] == stock_id].copy()
        df_meeting = df_meeting[df_meeting['StockID'] == stock_id].copy()
        df_dividend['Execution Date'] = pd.to_datetime(df_dividend['Execution Date'], format='%d/%m/%Y', errors='coerce')
        df_meeting['Execution Date'] = pd.to_datetime(df_meeting['Execution Date'], format='%d/%m/%Y')
        df['Dividend_Event'] = df['Date'].isin(df_dividend['Execution Date']).astype(int)
        df['Meeting_Event'] = df['Date'].isin(df_meeting['Execution Date']).astype(int)

        # Load financial data
        df_financial = pd.read_csv("6.5 (his) financialreport_metrics_Nh√≥m ng√†nh_C√¥ng ngh·ªá th√¥ng tin (of FPT_CMG)_processed.csv")
        def clean_financial_data(df):
            df['Indicator'] = df['Indicator'].str.replace('\n', '', regex=False).str.replace(r'\s+', ' ', regex=True).str.strip()
            for col in df.columns[3:]:
                df[col] = df[col].str.replace(',', '').astype(float, errors='ignore')
            return df
        df_financial = clean_financial_data(df_financial)

        indicators = FEATURES_XGB[8:]
        df_financial = df_financial[(df_financial['Stocks'].str.contains(stock_id)) & (df_financial['Indicator'].isin(indicators))].copy()
        quarters = ['Q1_2023', 'Q2_2023', 'Q3_2023', 'Q4_2023', 'Q1_2024', 'Q2_2024', 'Q3_2024', 'Q4_2024']
        df_financial_melted = df_financial.melt(id_vars=['Indicator'], value_vars=quarters, var_name='Quarter', value_name='Value')
        quarter_dates = {
            'Q1_2023': '2023-01-01', 'Q2_2023': '2023-04-01', 'Q3_2023': '2023-07-01', 'Q4_2023': '2023-10-01',
            'Q1_2024': '2024-01-01', 'Q2_2024': '2024-04-01', 'Q3_2024': '2024-07-01', 'Q4_2024': '2024-10-01'
        }
        df_financial_melted['Date'] = df_financial_melted['Quarter'].map(quarter_dates)
        df_financial_melted['Date'] = pd.to_datetime(df_financial_melted['Date'])
        df_financial_pivot = df_financial_melted.pivot(index='Date', columns='Indicator', values='Value')
        df = df.merge(df_financial_pivot, left_on='Date', right_index=True, how='left')
        df[indicators] = df[indicators].ffill()
        df = df.dropna().reset_index(drop=True)
        return df
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu cho {stock_id}: {str(e)}. Vui l√≤ng ki·ªÉm tra c√°c t·ªáp CSV.")
        st.stop()

# H√†m t·∫£i m√¥ h√¨nh
@st.cache_resource
def load_models(stock_id):
    try:
        # Load scaler if available, else create new one
        scaler_path = f"models/scaler_FPT.joblib" if stock_id == 'FPT' else f"models/scaler_CMG.joblib"
        scaler = joblib.load(scaler_path) if os.path.exists(scaler_path) else MinMaxScaler()
        if not os.path.exists(scaler_path):
            st.warning(f"Scaler cho {stock_id} kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. S·ª≠ d·ª•ng scaler m·ªõi, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·ªô ch√≠nh x√°c.")

        # Load models
        model_lstm = load_model(f"models/lstm_model_{stock_id}.h5", custom_objects={'mse': MeanSquaredError(), 'MeanSquaredError': MeanSquaredError()})
        model_xgb = joblib.load(f"models/xgb_model_{stock_id}.joblib")
        meta_model = load_model(f"models/meta_model_{stock_id}.h5", custom_objects={'mse': MeanSquaredError(), 'MeanSquaredError': MeanSquaredError()})
        return {'lstm': model_lstm, 'xgb': model_xgb, 'meta': meta_model}, scaler
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh ho·∫∑c scaler cho {stock_id}: {str(e)}. Vui l√≤ng ki·ªÉm tra th∆∞ m·ª•c 'models/'.")
        st.stop()

# T·∫£i d·ªØ li·ªáu v√† m√¥ h√¨nh
with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu v√† m√¥ h√¨nh..."):
    df = load_stock_data(stock_choice)
    models, scaler = load_models(stock_choice)

# H√†m d·ª± b√°o gi√°
def forecast_prices(df, _models, scaler, forecast_days, lookback=7):
    try:
        y_log = np.log1p(df['Closing Price'])
        scaler.fit(y_log.values.reshape(-1, 1))
        scaled_data = scaler.transform(y_log.values.reshape(-1, 1))
        
        # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu ƒë·ªß lookback
        if len(scaled_data) < lookback:
            raise ValueError(f"D·ªØ li·ªáu kh√¥ng ƒë·ªß {lookback} ng√†y ƒë·ªÉ d·ª± b√°o.")
        
        last_data = scaled_data[-lookback:]
        X_lstm = last_data.reshape(1, lookback, 1)

        forecast_prices = []
        current_price = df['Closing Price'].iloc[-1]
        for _ in range(forecast_days):
            lstm_pred = _models['lstm'].predict(X_lstm, verbose=0)
            lstm_pred_price = np.expm1(scaler.inverse_transform(lstm_pred))[0, 0]

            last_features = df.iloc[-1][FEATURES_XGB].values.reshape(1, -1)
            xgb_pred = _models['xgb'].predict(last_features)[0]

            meta_input = np.array([[lstm_pred_price, xgb_pred]])
            final_pred = _models['meta'].predict(meta_input, verbose=0)[0, 0]
            final_pred = np.nan_to_num(final_pred, nan=current_price, neginf=0)
            forecast_prices.append(max(final_pred, 0))

            # C·∫≠p nh·∫≠t new_data_point v·ªõi lookback ƒë·∫ßy ƒë·ªß
            new_data_point = np.append(last_data[0][1:], lstm_pred[0, 0])  # Tr√≠ch xu·∫•t gi√° tr·ªã duy nh·∫•t t·ª´ lstm_pred
            if len(new_data_point) != lookback:
                new_data_point = np.pad(new_data_point, (0, lookback - len(new_data_point)), 'edge')[:lookback]
            X_lstm = new_data_point.reshape(1, lookback, 1)

        forecast_dates = [df['Date'].iloc[-1] + timedelta(days=i) for i in range(1, forecast_days + 1)]
        return forecast_dates, forecast_prices
    except Exception as e:
        st.error(f"L·ªói khi d·ª± b√°o gi√° cho {stock_choice}: {str(e)}")
        st.stop()

# Tab ch√≠nh
tab1, tab2, tab3 = st.tabs(["üìä D·ªØ Li·ªáu & Ph√¢n T√≠ch", "üîÆ D·ª± B√°o Gi√°", "üìå ƒê·ªÅ Xu·∫•t Giao D·ªãch"])

with tab1:
    st.header(f"Ph√¢n T√≠ch C·ªï Phi·∫øu {stock_choice}")
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Bi·ªÉu ƒê·ªì Gi√°")
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df['Date'], y=df['Closing Price'], name='Gi√° ƒë√≥ng c·ª≠a', line=dict(color='blue')))
        fig.add_trace(go.Scatter(x=df['Date'], y=df['MA5'], name='MA5', line=dict(color='orange', width=1)))
        fig.add_trace(go.Scatter(x=df['Date'], y=df['MA10'], name='MA10', line=dict(color='green', width=1)))
        fig.update_layout(height=400, xaxis_title='Ng√†y', yaxis_title='Gi√° (VNƒê)', xaxis_rangeslider_visible=True)
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("Ch·ªâ S·ªë K·ªπ Thu·∫≠t")
        delta = df['Closing Price'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=5).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=5).mean()
        rs = gain / loss.replace(0, np.finfo(float).eps)
        rsi = 100 - (100 / (1 + rs))
        ema12 = df['Closing Price'].ewm(span=5, adjust=False).mean()
        ema26 = df['Closing Price'].ewm(span=10, adjust=False).mean()
        macd = ema12 - ema26
        signal = macd.ewm(span=3, adjust=False).mean()

        st.metric("RSI (5 ng√†y)", f"{rsi.iloc[-1]:.2f}",
                  "Mua qu√°" if rsi.iloc[-1] > 70 else "B√°n qu√°" if rsi.iloc[-1] < 30 else "B√¨nh th∆∞·ªùng")
        st.metric("MACD", f"{macd.iloc[-1]:.2f}",
                  "TƒÉng" if macd.iloc[-1] > signal.iloc[-1] else "Gi·∫£m")
        st.metric("Kh·ªëi l∆∞·ª£ng giao d·ªãch", f"{df['Total Volume'].iloc[-1]:,.0f}")
        trend = "TƒÉng" if df['Closing Price'].iloc[-1] > df['Closing Price'].iloc[-5] else "Gi·∫£m"
        st.metric("Xu h∆∞·ªõng ng·∫Øn h·∫°n", trend)

with tab2:
    st.header(f"D·ª± B√°o Gi√° {stock_choice}")
    with st.spinner("ƒêang t·∫°o d·ª± b√°o gi√°..."):
        forecast_dates, forecast_prices = forecast_prices(df, models, scaler, forecast_days)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Bi·ªÉu ƒê·ªì D·ª± B√°o")
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df['Date'],
            y=df['Closing Price'],
            name='Gi√° l·ªãch s·ª≠',
            line=dict(color='blue')
        ))
        fig.add_trace(go.Scatter(
            x=forecast_dates,
            y=forecast_prices,
            name='D·ª± b√°o',
            line=dict(color='red', dash='dot')
        ))
        fig.update_layout(
            height=500,
            title=f"D·ª± b√°o gi√° {stock_choice} trong {forecast_days} ng√†y t·ªõi",
            xaxis_title="Ng√†y",
            yaxis_title="Gi√° (VNƒê)",
            showlegend=True
        )
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("Chi Ti·∫øt D·ª± B√°o")
        current_price = df['Closing Price'].iloc[-1]
        forecast_df = pd.DataFrame({
            'Ng√†y': forecast_dates,
            'Gi√° d·ª± b√°o': forecast_prices,
            'Bi·∫øn ƒë·ªông (%)': [(p / current_price - 1) * 100 for p in forecast_prices]
        })
        forecast_df['Gi√° d·ª± b√°o'] = forecast_df['Gi√° d·ª± b√°o'].apply(lambda x: f"{x:,.0f}")
        forecast_df['Bi·∫øn ƒë·ªông (%)'] = forecast_df['Bi·∫øn ƒë·ªông (%)'].apply(lambda x: f"{x:+.2f}%")

        st.dataframe(
            forecast_df,
            hide_index=True,
            use_container_width=True
        )

        max_change = max([abs(float(x.strip('%'))) for x in forecast_df['Bi·∫øn ƒë·ªông (%)']])
        st.metric("Bi·∫øn ƒë·ªông t·ªëi ƒëa d·ª± ki·∫øn", f"{max_change:.2f}%")

with tab3:
    st.header(f"ƒê·ªÅ Xu·∫•t Giao D·ªãch {stock_choice}")

    current_price = df['Closing Price'].iloc[-1]
    ma5 = df['MA5'].iloc[-1]
    ma10 = df['MA10'].iloc[-1]
    rsi_value = rsi.iloc[-1]

    recommendation = "Gi·ªØ"
    reasoning = []

    forecast_trend = forecast_prices[-1] > current_price
    if forecast_trend:
        reasoning.append("M√¥ h√¨nh d·ª± b√°o xu h∆∞·ªõng tƒÉng trong ng·∫Øn h·∫°n")
    else:
        reasoning.append("M√¥ h√¨nh d·ª± b√°o xu h∆∞·ªõng gi·∫£m trong ng·∫Øn h·∫°n")

    if current_price > ma5 > ma10:
        recommendation = "Mua"
        reasoning.append("Gi√° v∆∞·ª£t tr√™n c·∫£ MA5 v√† MA10 - xu h∆∞·ªõng tƒÉng ng·∫Øn h·∫°n")
    elif current_price < ma5 < ma10:
        recommendation = "B√°n"
        reasoning.append("Gi√° d∆∞·ªõi c·∫£ MA5 v√† MA10 - xu h∆∞·ªõng gi·∫£m ng·∫Øn h·∫°n")

    if rsi_value < 30:
        recommendation = "Mua m·∫°nh" if recommendation == "Mua" else "Mua"
        reasoning.append("RSI d∆∞·ªõi 30 - c·ªï phi·∫øu b·ªã b√°n qu√° m·ª©c")
    elif rsi_value > 70:
        recommendation = "B√°n m·∫°nh" if recommendation == "B√°n" else "B√°n"
        reasoning.append("RSI tr√™n 70 - c·ªï phi·∫øu mua qu√° m·ª©c")

    if df['Dividend_Event'].iloc[-5:].sum() > 0:
        reasoning.append("C√≥ s·ª± ki·ªán c·ªï t·ª©c g·∫ßn ƒë√¢y - th∆∞·ªùng t·∫°o bi·∫øn ƒë·ªông gi√°")
    if df['Meeting_Event'].iloc[-5:].sum() > 0:
        reasoning.append("C√≥ s·ª± ki·ªán h·ªçp c·ªï ƒë√¥ng g·∫ßn ƒë√¢y - c·∫ßn theo d√µi th√¥ng tin")

    col1, col2 = st.columns([1, 3])

    with col1:
        st.subheader("Khuy·∫øn Ngh·ªã")
        if recommendation.startswith("Mua"):
            st.success(f"### {recommendation}")
        elif recommendation.startswith("B√°n"):
            st.error(f"### {recommendation}")
        else:
            st.info(f"### {recommendation}")

        st.metric("Gi√° hi·ªán t·∫°i", f"{current_price:,.0f}")

        atr = df['Closing Price'].diff().abs().rolling(window=5).mean().iloc[-1]
        if recommendation.startswith("Mua"):
            entry = current_price * 0.99
            stop_loss = current_price - 2 * atr
            take_profit = current_price + 3 * atr
        elif recommendation.startswith("B√°n"):
            entry = current_price * 1.01
            stop_loss = current_price + 2 * atr
            take_profit = current_price - 3 * atr
        else:
            entry = current_price
            stop_loss = current_price - 1.5 * atr
            take_profit = current_price + 1.5 * atr

        st.metric("ƒêi·ªÉm v√†o l·ªánh", f"{entry:,.0f}")
        st.metric("C·∫Øt l·ªó", f"{stop_loss:,.0f}", delta=f"{(stop_loss / current_price - 1) * 100:+.1f}%")
        st.metric("Ch·ªët l·ªùi", f"{take_profit:,.0f}", delta=f"{(take_profit / current_price - 1) * 100:+.1f}%")

    with col2:
        st.subheader("Ph√¢n T√≠ch Chi Ti·∫øt")
        st.write("**C∆° s·ªü ƒë·ªÅ xu·∫•t:**")
        for reason in reasoning:
            st.write(f"- {reason}")

        st.write("**Ch·ªâ s·ªë quan tr·ªçng:**")
        cols = st.columns(4)
        with cols[0]:
            st.metric("P/E", f"{df['Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)L·∫ßn'].iloc[-1]:.1f}")
        with cols[1]:
            st.metric("ROE", f"{df['T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n V·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)%'].iloc[-1]:.1f}%")
        with cols[2]:
            st.metric("EPS", f"{df['Thu nh·∫≠p tr√™n m·ªói c·ªï ph·∫ßn (EPS)VNƒê'].iloc[-1]:,.0f}")
        with cols[3]:
            st.metric("Volume Ratio", f"{df['Volume_ratio'].iloc[-1]:.2f}")

        st.warning("**C·∫£nh b√°o r·ªßi ro:**")
        st.write("""
        - D·ª± b√°o kh√¥ng ƒë·∫£m b·∫£o ch√≠nh x√°c 100%
        - Th·ªã tr∆∞·ªùng c√≥ th·ªÉ bi·∫øn ƒë·ªông do y·∫øu t·ªë vƒ© m√¥
        - Lu√¥n s·ª≠ d·ª•ng l·ªánh c·∫Øt l·ªó ƒë·ªÉ qu·∫£n l√Ω r·ªßi ro
        - C√¢n nh·∫Øc ƒëa d·∫°ng h√≥a danh m·ª•c ƒë·∫ßu t∆∞
        """)

# Hi·ªÉn th·ªã ƒë√°nh gi√° m√¥ h√¨nh


# Footer
st.markdown("---")
st.markdown("""
**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
1. Ch·ªçn c·ªï phi·∫øu (FPT/CMG) v√† s·ªë ng√†y d·ª± b√°o trong sidebar
2. Xem ph√¢n t√≠ch k·ªπ thu·∫≠t v√† c∆° b·∫£n ·ªü tab ƒë·∫ßu ti√™n
3. Ki·ªÉm tra d·ª± b√°o gi√° ·ªü tab th·ª© hai
4. Tham kh·∫£o ƒë·ªÅ xu·∫•t giao d·ªãch ·ªü tab cu·ªëi c√πng
5. Ki·ªÉm tra hi·ªáu su·∫•t m√¥ h√¨nh ·ªü ph·∫ßn ƒë√°nh gi√°
""")