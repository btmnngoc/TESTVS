import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from models.stock_prediction import train_stock_prediction_model
import warnings
warnings.filterwarnings('ignore')

# Page configuration
st.set_page_config(
    page_title="D·ª± b√°o gi√° c·ªï phi·∫øu ng·∫Øn h·∫°n",
    page_icon="üìà",
    layout="wide"
)

# Custom CSS
st.markdown("""
    <style>
    .main {
        max-width: 1200px;
    }
    .metric-box {
        padding: 15px;
        border-radius: 10px;
        background-color: #f0f2f6;
        margin-bottom: 10px;
    }
    .stButton>button {
        width: 100%;
    }
    </style>
    """, unsafe_allow_html=True)

# Title
st.title("üí° D·ª± b√°o gi√° c·ªï phi·∫øu ng·∫Øn h·∫°n")

# Sidebar configuration
with st.sidebar:
    st.header("Thi·∫øt l·∫≠p d·ª± b√°o")
    
    # Stock selection
    stock_options = ['FPT', 'CMG']
    selected_stock = st.selectbox(
        "Ch·ªçn m√£ c·ªï phi·∫øu",
        stock_options,
        help="Ch·ªçn m√£ c·ªï phi·∫øu b·∫°n mu·ªën d·ª± b√°o"
    )
    
    # Forecast period
    forecast_days = st.slider(
        "S·ªë ng√†y d·ª± b√°o",
        1, 30, 7,
        help="Ch·ªçn s·ªë ng√†y trong t∆∞∆°ng lai c·∫ßn d·ª± b√°o"
    )
    
    # Model selection
    model_options = ['M√¥ h√¨nh k·∫øt h·ª£p (LSTM + XGBoost)', 'LSTM', 'XGBoost']
    selected_model = st.selectbox(
        "Ch·ªçn m√¥ h√¨nh",
        model_options,
        index=0,
        help="Ch·ªçn m√¥ h√¨nh d·ª± b√°o"
    )
    
    # Retrain option
    force_retrain = st.checkbox(
        "Hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh",
        value=False,
        help="B·ªè ch·ªçn ƒë·ªÉ s·ª≠ d·ª•ng m√¥ h√¨nh ƒë√£ l∆∞u (n·∫øu c√≥)"
    )
    
    st.markdown("---")
    st.markdown("**L∆∞u √Ω:**")
    st.info("""
        - D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông t·ª´ c√°c ngu·ªìn ƒë√°ng tin c·∫≠y
        - K·∫øt qu·∫£ d·ª± b√°o ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o
        - M√¥ h√¨nh s·∫Ω t·ª± ƒë·ªông l∆∞u sau khi hu·∫•n luy·ªán
    """)

# Helper functions
def fig_to_bytes(fig):
    """Convert matplotlib figure to bytes for download"""
    import io
    buf = io.BytesIO()
    fig.savefig(buf, format='png', dpi=300, bbox_inches='tight')
    buf.seek(0)
    return buf

def forecast_future(models, scaler, last_data, lookback, days, model_type='combined'):
    """Generate future forecasts"""
    # Prepare input data
    last_data_log = np.log1p(last_data)
    last_data_scaled = scaler.transform(last_data_log.reshape(-1, 1)).flatten()
    current_input = last_data_scaled[-lookback:].copy()
    predictions = []
    
    for _ in range(days):
        # Prepare input based on model type
        if model_type == 'LSTM':
            lstm_input = current_input.reshape(1, lookback, 1)
            next_pred_scaled = models["lstm"].predict(lstm_input, verbose=0)[0, 0]
        elif model_type == 'XGBoost':
            # For XGBoost, we need to create features for the future prediction
            # This is simplified - in practice you'd need to update all features
            next_pred_scaled = models["xgb"].predict(current_input.reshape(1, -1))[0]
        else:  # Combined model
            lstm_input = current_input.reshape(1, lookback, 1)
            lstm_pred = models["lstm"].predict(lstm_input, verbose=0)[0, 0]
            
            # For XGBoost part, we'd need the actual features - this is simplified
            xgb_pred = models["xgb"].predict(current_input.reshape(1, -1))[0]
            
            # Combine predictions
            meta_input = np.array([[lstm_pred, xgb_pred]])
            next_pred_scaled = models["meta"].predict(meta_input, verbose=0)[0, 0]
        
        predictions.append(next_pred_scaled)
        current_input = np.roll(current_input, -1)
        current_input[-1] = next_pred_scaled
    
    # Convert predictions to original scale
    predictions = np.array(predictions).reshape(-1, 1)
    predictions = scaler.inverse_transform(predictions)
    predictions = np.expm1(predictions).flatten()
    
    return predictions

# Main app function
def main():
    # Show loading message
    with st.spinner(f"ƒêang t·∫£i m√¥ h√¨nh cho {selected_stock}..."):
        models, scaler, lookback, metrics, y_test, y_pred, df = train_stock_prediction_model(
            selected_stock, force_retrain=force_retrain
        )
    
    # Show success message
    st.success(f"""
        Ho√†n th√†nh t·∫£i m√¥ h√¨nh! 
        D·ªØ li·ªáu hu·∫•n luy·ªán ƒë·∫øn ng√†y: {metrics['last_training_date']}
    """)
    
    # Display model metrics
    st.subheader("üìä K·∫øt qu·∫£ ƒë√°nh gi√° m√¥ h√¨nh")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("MAE (L·ªói tuy·ªát ƒë·ªëi trung b√¨nh)", f"{metrics['mae']:.2f}")
    with col2:
        st.metric("RMSE (L·ªói b√¨nh ph∆∞∆°ng trung b√¨nh)", f"{metrics['rmse']:.2f}")
    with col3:
        st.metric("R¬≤ (ƒê·ªô ph√π h·ª£p)", f"{metrics['r2']:.4f}")
    
    # Display evaluation chart
    st.subheader("üìà Bi·ªÉu ƒë·ªì ƒë√°nh gi√° m√¥ h√¨nh")
    
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df['Date'].iloc[-len(y_test):], y_test, label='Gi√° th·ª±c t·∫ø', linewidth=2)
    ax.plot(df['Date'].iloc[-len(y_test):], y_pred, label='Gi√° d·ª± b√°o', linestyle='--', linewidth=2)
    ax.set_xlabel("Ng√†y")
    ax.set_ylabel("Gi√° ƒë√≥ng c·ª≠a")
    ax.set_title(f"K·∫øt qu·∫£ d·ª± b√°o cho {selected_stock}")
    ax.legend()
    ax.grid(True)
    plt.xticks(rotation=45)
    st.pyplot(fig)
    
    # Download button for evaluation chart
    st.download_button(
        label="T·∫£i bi·ªÉu ƒë·ªì ƒë√°nh gi√°",
        data=fig_to_bytes(fig),
        file_name=f"evaluation_{selected_stock}_{datetime.now().strftime('%Y%m%d')}.png",
        mime="image/png"
    )
    
    # Future forecast section
    st.subheader("üîÆ D·ª± b√°o gi√° t∆∞∆°ng lai")
    
    # Get last available data for forecasting
    last_prices = df['Closing Price'].values[-lookback:]
    last_date = df['Date'].iloc[-1]
    
    # Generate forecast
    if selected_model == 'LSTM':
        model_type = 'LSTM'
    elif selected_model == 'XGBoost':
        model_type = 'XGBoost'
    else:
        model_type = 'combined'
    
    future_prices = forecast_future(
        models, scaler, last_prices, lookback, forecast_days, model_type
    )
    
    # Create future dates
    future_dates = [last_date + timedelta(days=i) for i in range(1, forecast_days+1)]
    
    # Display forecast results
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Chi ti·∫øt d·ª± b√°o:**")
        forecast_df = pd.DataFrame({
            'Ng√†y': future_dates,
            'Gi√° d·ª± b√°o': future_prices,
            'Thay ƒë·ªïi %': np.concatenate([
                [np.nan],
                (future_prices[1:] - future_prices[:-1]) / future_prices[:-1] * 100
            ])
        })
        
        # Format the display
        st.dataframe(
            forecast_df.style.format({
                'Ng√†y': lambda x: x.strftime('%d/%m/%Y'),
                'Gi√° d·ª± b√°o': '{:.2f}',
                'Thay ƒë·ªïi %': '{:.2f}%'
            }).applymap(
                lambda x: 'color: green' if isinstance(x, str) and '+' in x else (
                    'color: red' if isinstance(x, str) and '-' in x else ''
                ),
                subset=['Thay ƒë·ªïi %']
            ),
            hide_index=True,
            use_container_width=True
        )
        
        # Download forecast data
        csv = forecast_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="T·∫£i d·ªØ li·ªáu d·ª± b√°o (CSV)",
            data=csv,
            file_name=f"forecast_{selected_stock}_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )
    
    with col2:
        st.markdown("**Bi·ªÉu ƒë·ªì d·ª± b√°o:**")
        
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        
        # Plot historical data (last 30 days)
        ax2.plot(
            df['Date'].iloc[-30:], 
            df['Closing Price'].iloc[-30:], 
            label='Gi√° l·ªãch s·ª≠', 
            color='blue',
            linewidth=2
        )
        
        # Plot forecast
        ax2.plot(
            future_dates, 
            future_prices, 
            label='D·ª± b√°o t∆∞∆°ng lai', 
            color='red', 
            linestyle='--',
            marker='o',
            linewidth=2
        )
        
        ax2.set_title(f"D·ª± b√°o gi√° {selected_stock} {forecast_days} ng√†y t·ªõi")
        ax2.set_xlabel("Ng√†y")
        ax2.set_ylabel("Gi√° ƒë√≥ng c·ª≠a")
        ax2.legend()
        ax2.grid(True)
        plt.xticks(rotation=45)
        st.pyplot(fig2)
        
        # Download forecast chart
        st.download_button(
            label="T·∫£i bi·ªÉu ƒë·ªì d·ª± b√°o",
            data=fig_to_bytes(fig2),
            file_name=f"forecast_chart_{selected_stock}_{datetime.now().strftime('%Y%m%d')}.png",
            mime="image/png"
        )
    
    # Model explanation section
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Gi·∫£i th√≠ch m√¥ h√¨nh")
    
    st.markdown("""
    **M√¥ h√¨nh k·∫øt h·ª£p (LSTM + XGBoost):**
    - S·ª≠ d·ª•ng s·ª©c m·∫°nh c·ªßa c·∫£ hai m√¥ h√¨nh LSTM (cho d·ªØ li·ªáu chu·ªói th·ªùi gian) v√† XGBoost (cho ƒë·∫∑c tr∆∞ng tƒ©nh)
    - M√¥ h√¨nh meta h·ªçc c√°ch k·∫øt h·ª£p t·ªët nh·∫•t c√°c d·ª± b√°o t·ª´ hai m√¥ h√¨nh c∆° s·ªü
    - Th∆∞·ªùng cho k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t trong c√°c th·ª≠ nghi·ªám
    
    **M√¥ h√¨nh LSTM:**
    - M·∫°ng neural ƒë·∫∑c bi·ªát cho d·ªØ li·ªáu chu·ªói th·ªùi gian
    - Hi·ªáu qu·∫£ trong vi·ªác h·ªçc c√°c m·∫´u ph·ª©c t·∫°p trong d·ªØ li·ªáu gi√° c·ªï phi·∫øu
    
    **M√¥ h√¨nh XGBoost:**
    - M√¥ h√¨nh d·ª±a tr√™n c√¢y quy·∫øt ƒë·ªãnh ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a
    - Hi·ªáu qu·∫£ trong vi·ªác h·ªçc t·ª´ c√°c ƒë·∫∑c tr∆∞ng t√†i ch√≠nh v√† k·ªπ thu·∫≠t
    """)

if __name__ == "__main__":
    main()