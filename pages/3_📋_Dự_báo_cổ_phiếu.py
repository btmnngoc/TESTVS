import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from models.stock_prediction import train_stock_prediction_model
import warnings
warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p trang
st.set_page_config(page_title="D·ª± b√°o gi√° c·ªï phi·∫øu ng·∫Øn h·∫°n", page_icon="üìà", layout="wide")
st.title("üí° D·ª± b√°o gi√° c·ªï phi·∫øu ng·∫Øn h·∫°n")

# Sidebar ƒë·ªÉ ch·ªçn c·ªï phi·∫øu v√† c√°c tham s·ªë
with st.sidebar:
    st.header("Thi·∫øt l·∫≠p d·ª± b√°o")
    stock_options = ['FPT', 'CMG']
    selected_stock = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", stock_options)
    
    forecast_days = st.slider("S·ªë ng√†y d·ª± b√°o", 1, 30, 7, 
                             help="Ch·ªçn s·ªë ng√†y trong t∆∞∆°ng lai c·∫ßn d·ª± b√°o")
    
    model_options = ['M√¥ h√¨nh k·∫øt h·ª£p (LSTM + XGBoost)', 'LSTM', 'XGBoost']
    selected_model = st.selectbox("Ch·ªçn m√¥ h√¨nh", model_options)
    
    st.markdown("---")
    st.markdown("**L∆∞u √Ω:**")
    st.info("D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông t·ª´ c√°c ngu·ªìn ƒë√°ng tin c·∫≠y. K·∫øt qu·∫£ d·ª± b√°o ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o.")

# H√†m t·∫£i d·ªØ li·ªáu (c√≥ th·ªÉ t√°ch ra file utils/data_loader.py sau)
@st.cache_data
def load_data(stock_id):
    if stock_id == 'FPT':
        df = pd.read_csv("4.2.3 (TARGET) (live & his) FPT_detail_transactions_processed.csv")
    else:
        df = pd.read_csv("4.2.3 (TARGET) (live & his) CMG_detail_transactions_processed.csv")
    
    # X·ª≠ l√Ω d·ªØ li·ªáu nh∆∞ trong code g·ªëc
    df = df[df['StockID'] == stock_id].copy()
    df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
    df = df.sort_values('Date')
    df['Closing Price'] = df['Closing Price'].str.replace(',', '').astype(float)
    df['Total Volume'] = df['Total Volume'].str.replace(',', '').astype(float)
    
    return df

# H√†m hi·ªÉn th·ªã k·∫øt qu·∫£
def display_results(df, y_test, y_pred, metrics):
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Ch·ªâ s·ªë ƒë√°nh gi√° m√¥ h√¨nh")
        st.metric("MAE (L·ªói tuy·ªát ƒë·ªëi trung b√¨nh)", f"{metrics['mae']:.2f}")
        st.metric("RMSE (L·ªói b√¨nh ph∆∞∆°ng trung b√¨nh)", f"{metrics['rmse']:.2f}")
        st.metric("R¬≤ (ƒê·ªô ph√π h·ª£p)", f"{metrics['r2']:.4f}")
        
        st.markdown("---")
        st.write("**Gi·∫£i th√≠ch ch·ªâ s·ªë:**")
        st.info("- MAE: Sai s·ªë trung b√¨nh gi·ªØa gi√° th·ª±c v√† gi√° d·ª± b√°o (c√†ng th·∫•p c√†ng t·ªët)")
        st.info("- RMSE: T∆∞∆°ng t·ª± MAE nh∆∞ng ph·∫°t n·∫∑ng h∆°n c√°c sai s·ªë l·ªõn")
        st.info("- R¬≤: T·ª∑ l·ªá ph∆∞∆°ng sai ƒë∆∞·ª£c gi·∫£i th√≠ch b·ªüi m√¥ h√¨nh (1 l√† t·ªët nh·∫•t)")
    
    with col2:
        st.subheader("Bi·ªÉu ƒë·ªì d·ª± b√°o")
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(df['Date'].iloc[-len(y_test):], y_test, label='Gi√° th·ª±c t·∫ø', linewidth=2)
        ax.plot(df['Date'].iloc[-len(y_test):], y_pred, label='Gi√° d·ª± b√°o', linestyle='--', linewidth=2)
        ax.set_xlabel("Ng√†y")
        ax.set_ylabel("Gi√° ƒë√≥ng c·ª≠a")
        ax.set_title(f"D·ª± b√°o gi√° {selected_stock} - {selected_model}")
        ax.legend()
        ax.grid(True)
        plt.xticks(rotation=45)
        st.pyplot(fig)
        
        # N√∫t t·∫£i bi·ªÉu ƒë·ªì
        st.download_button(
            label="T·∫£i bi·ªÉu ƒë·ªì",
            data=fig_to_bytes(fig),
            file_name=f"du_bao_{selected_stock}_{datetime.now().strftime('%Y%m%d')}.png",
            mime="image/png"
        )

# H√†m chuy·ªÉn figure th√†nh bytes ƒë·ªÉ t·∫£i xu·ªëng
def fig_to_bytes(fig):
    import io
    buf = io.BytesIO()
    fig.savefig(buf, format='png', dpi=300, bbox_inches='tight')
    buf.seek(0)
    return buf

# H√†m d·ª± b√°o t∆∞∆°ng lai
def forecast_future(model, last_data, scaler, days):
    predictions = []
    current_input = last_data.copy()
    
    for _ in range(days):
        # D·ª± b√°o b∆∞·ªõc ti·∫øp theo
        pred = model.predict(current_input.reshape(1, -1, 1))[0, 0]
        predictions.append(pred)
        
        # C·∫≠p nh·∫≠t input cho b∆∞·ªõc ti·∫øp theo
        current_input = np.roll(current_input, -1)
        current_input[-1] = pred
    
    # Chuy·ªÉn ƒë·ªïi l·∫°i v·ªÅ gi√° tr·ªã g·ªëc
    predictions = np.array(predictions).reshape(-1, 1)
    predictions = scaler.inverse_transform(predictions)
    predictions = np.expm1(predictions).flatten()
    
    return predictions

# Main app
def main():
    # Hi·ªÉn th·ªã th√¥ng tin
    st.info(f"ƒêang t·∫£i d·ªØ li·ªáu v√† hu·∫•n luy·ªán m√¥ h√¨nh cho c·ªï phi·∫øu {selected_stock}...")
    
    # T·∫£i d·ªØ li·ªáu
    df = load_data(selected_stock)
    
    # Hu·∫•n luy·ªán m√¥ h√¨nh (c√≥ th·ªÉ cache l·∫°i ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô)
    with st.spinner(f"ƒêang hu·∫•n luy·ªán m√¥ h√¨nh cho {selected_stock}..."):
        model, scaler, metrics, y_test, y_pred = train_stock_prediction_model(selected_stock)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.success("Ho√†n th√†nh hu·∫•n luy·ªán m√¥ h√¨nh!")
    display_results(df, y_test, y_pred, metrics)
    
    # D·ª± b√°o t∆∞∆°ng lai
    st.subheader(f"D·ª± b√°o gi√° {selected_stock} trong {forecast_days} ng√†y t·ªõi")
    
    # L·∫•y d·ªØ li·ªáu cu·ªëi c√πng ƒë·ªÉ d·ª± b√°o
    last_data = df['Closing Price'].values[-lookback:]
    last_dates = df['Date'].values[-lookback:]
    
    # Chu·∫©n h√≥a d·ªØ li·ªáu
    last_data_log = np.log1p(last_data)
    last_data_scaled = scaler.transform(last_data_log.reshape(-1, 1)).flatten()
    
    # D·ª± b√°o
    future_predictions = forecast_future(model, last_data_scaled, scaler, forecast_days)
    
    # T·∫°o dates cho t∆∞∆°ng lai
    last_date = pd.to_datetime(last_dates[-1])
    future_dates = [last_date + timedelta(days=i) for i in range(1, forecast_days+1)]
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± b√°o
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Chi ti·∫øt d·ª± b√°o:**")
        forecast_df = pd.DataFrame({
            'Ng√†y': future_dates,
            'Gi√° d·ª± b√°o': future_predictions
        })
        st.dataframe(forecast_df.style.format({
            'Gi√° d·ª± b√°o': '{:.2f}',
            'Ng√†y': lambda x: x.strftime('%d/%m/%Y')
        }), hide_index=True)
        
        # N√∫t t·∫£i d·ªØ li·ªáu d·ª± b√°o
        csv = forecast_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="T·∫£i d·ªØ li·ªáu d·ª± b√°o (CSV)",
            data=csv,
            file_name=f"du_bao_{selected_stock}_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )
    
    with col2:
        st.write("**Bi·ªÉu ƒë·ªì d·ª± b√°o t∆∞∆°ng lai:**")
        fig, ax = plt.subplots(figsize=(10, 4))
        
        # V·∫Ω d·ªØ li·ªáu l·ªãch s·ª≠
        ax.plot(df['Date'].iloc[-30:], df['Closing Price'].iloc[-30:], 
                label='Gi√° l·ªãch s·ª≠', color='blue')
        
        # V·∫Ω d·ª± b√°o
        ax.plot(future_dates, future_predictions, 
                label='D·ª± b√°o t∆∞∆°ng lai', color='red', linestyle='--', marker='o')
        
        ax.set_title(f"D·ª± b√°o gi√° {selected_stock} {forecast_days} ng√†y t·ªõi")
        ax.set_xlabel("Ng√†y")
        ax.set_ylabel("Gi√° ƒë√≥ng c·ª≠a")
        ax.legend()
        ax.grid(True)
        plt.xticks(rotation=45)
        st.pyplot(fig)

if __name__ == "__main__":
    main()
