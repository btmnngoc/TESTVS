import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import load_model
import xgboost as xgb
import joblib
import matplotlib.pyplot as plt
import os
from datetime import datetime, timedelta
from tensorflow.keras import losses


# Thi·∫øt l·∫≠p trang
st.set_page_config(page_title="D·ª± b√°o gi√° c·ªï phi·∫øu", page_icon="üìà", layout="wide")
st.title("üìà D·ª± b√°o gi√° c·ªï phi·∫øu FPT v√† CMG")

# H√†m ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
def preprocess_data(stock_id):
    # Load d·ªØ li·ªáu giao d·ªãch
    if stock_id == 'FPT':
        df = pd.read_csv("4.2.3 (TARGET) (live & his) FPT_detail_transactions_processed.csv")
    else:
        df = pd.read_csv("4.2.3 (TARGET) (live & his) CMG_detail_transactions_processed.csv")
    
    df = df[df['StockID'] == stock_id].copy()
    df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
    df = df.sort_values('Date')
    df['Closing Price'] = df['Closing Price'].str.replace(',', '').astype(float)
    df['Total Volume'] = df['Total Volume'].str.replace(',', '').astype(float)

    # T·∫°o c√°c ƒë·∫∑c tr∆∞ng
    df['Return%'] = df['Closing Price'].pct_change() * 100
    df['MA5'] = df['Closing Price'].rolling(window=5).mean()
    df['MA10'] = df['Closing Price'].rolling(window=10).mean()
    df['Volume_ratio'] = df['Total Volume'] / df['Total Volume'].rolling(5).mean()
    df['Volatility'] = df['Closing Price'].pct_change().rolling(window=5).std() * 100
    df['Price_Momentum'] = df['Closing Price'].diff(5)
    df = df.fillna(0)

    # T√≠ch h·ª£p d·ªØ li·ªáu s·ª± ki·ªán
    df_dividend = pd.read_csv("3.2 (live & his) news_dividend_issue (FPT_CMG)_processed.csv")
    df_meeting = pd.read_csv("3.3 (live & his) news_shareholder_meeting (FPT_CMG)_processed.csv")

    df_dividend_stock = df_dividend[df_dividend['StockID'] == stock_id].copy()
    df_meeting_stock = df_meeting[df_meeting['StockID'] == stock_id].copy()
    df_dividend_stock.loc[:, 'Execution Date'] = pd.to_datetime(df_dividend_stock['Execution Date'], format='%d/%m/%Y', errors='coerce')
    df_meeting_stock.loc[:, 'Execution Date'] = pd.to_datetime(df_meeting_stock['Execution Date'], format='%d/%m/%Y')

    df['Dividend_Event'] = df['Date'].isin(df_dividend_stock['Execution Date']).astype(int)
    df['Meeting_Event'] = df['Date'].isin(df_meeting_stock['Execution Date']).astype(int)

    # T√≠ch h·ª£p d·ªØ li·ªáu t√†i ch√≠nh
    df_financial = pd.read_csv("6.5 (his) financialreport_metrics_Nh√≥m ng√†nh_C√¥ng ngh·ªá th√¥ng tin (of FPT_CMG)_processed.csv")
    
    def clean_financial_data(df):
        df['Indicator'] = df['Indicator'].str.replace('\n', '', regex=False).str.replace(r'\s+', ' ', regex=True).str.strip()
        for col in df.columns[3:]:
            df[col] = df[col].str.replace(',', '').astype(float, errors='ignore')
        return df
    
    df_financial = clean_financial_data(df_financial)
    
    indicators = [
        'T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n V·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)%',
        'T·ª∑ l·ªá l√£i EBIT%',
        'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n gi√° tr·ªã s·ªï s√°ch (P/B)L·∫ßn',
        'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)L·∫ßn',
        'P/SL·∫ßn',
        'T·ª∑ su·∫•t sinh l·ª£i tr√™n v·ªën d√†i h·∫°n b√¨nh qu√¢n (ROCE)%',
        'Thu nh·∫≠p tr√™n m·ªói c·ªï ph·∫ßn (EPS)VNƒê'
    ]
    
    df_financial_stock = df_financial[(df_financial['Stocks'].str.contains(stock_id)) & (df_financial['Indicator'].isin(indicators))].copy()
    
    quarters = ['Q1_2023', 'Q2_2023', 'Q3_2023', 'Q4_2023', 'Q1_2024', 'Q2_2024', 'Q3_2024', 'Q4_2024']
    df_financial_melted = df_financial_stock.melt(id_vars=['Indicator'], value_vars=quarters, var_name='Quarter', value_name='Value')
    
    quarter_dates = {
        'Q1_2023': '2023-01-01', 'Q2_2023': '2023-04-01', 'Q3_2023': '2023-07-01', 'Q4_2023': '2023-10-01',
        'Q1_2024': '2024-01-01', 'Q2_2024': '2024-04-01', 'Q3_2024': '2024-07-01', 'Q4_2024': '2024-10-01'
    }
    
    df_financial_melted['Date'] = df_financial_melted['Quarter'].map(quarter_dates)
    df_financial_melted['Date'] = pd.to_datetime(df_financial_melted['Date'])
    df_financial_pivot = df_financial_melted.pivot(index='Date', columns='Indicator', values='Value')
    
    df = df.merge(df_financial_pivot, left_on='Date', right_index=True, how='left')
    df[indicators] = df[indicators].ffill()
    df = df.dropna().reset_index(drop=True)
    
    return df

# H√†m d·ª± b√°o
def predict_stock_price(stock_id, days_to_predict=7):
    # Load d·ªØ li·ªáu
    df = preprocess_data(stock_id)
    
    # Load c√°c model ƒë√£ train
    custom_objects = {
        'MeanSquaredError': MeanSquaredError,
        'Adam': Adam
    }
    
    if stock_id == 'FPT':
        model_lstm = load_model('models/lstm_model_FPT.h5', 
                              custom_objects=custom_objects)
        meta_model = load_model('models/meta_model_FPT.h5',
                              custom_objects=custom_objects)
    else:
        model_lstm = load_model('models/lstm_model_CMG.h5',
                              custom_objects=custom_objects)
        meta_model = load_model('models/meta_model_CMG.h5',
                              custom_objects=custom_objects)
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu cho d·ª± b√°o
    features_xgb = ['Return%', 'MA5', 'MA10', 'Volume_ratio', 'Dividend_Event', 'Meeting_Event', 'Volatility', 'Price_Momentum'] + [
        'T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n V·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)%',
        'T·ª∑ l·ªá l√£i EBIT%',
        'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n gi√° tr·ªã s·ªï s√°ch (P/B)L·∫ßn',
        'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)L·∫ßn',
        'P/SL·∫ßn',
        'T·ª∑ su·∫•t sinh l·ª£i tr√™n v·ªën d√†i h·∫°n b√¨nh qu√¢n (ROCE)%',
        'Thu nh·∫≠p tr√™n m·ªói c·ªï ph·∫ßn (EPS)VNƒê'
    ]
    
    X_xgb = df[features_xgb]
    y = df['Closing Price']
    
    # Chu·∫©n h√≥a d·ªØ li·ªáu cho LSTM
    y_log = np.log1p(df['Closing Price'])
    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(y_log.values.reshape(-1, 1))
    
    lookback = 7
    X_lstm = []
    for i in range(lookback, len(scaled_data)):
        X_lstm.append(scaled_data[i - lookback:i, 0])
    X_lstm = np.array(X_lstm)
    X_lstm = np.reshape(X_lstm, (X_lstm.shape[0], X_lstm.shape[1], 1))
    
    # D·ª± b√°o v·ªõi c√°c model
    pred_lstm = np.expm1(scaler.inverse_transform(model_lstm.predict(X_lstm[-1].reshape(1, lookback, 1)))).flatten()[0]
    pred_xgb = model_xgb.predict(X_xgb.iloc[-1:].values.reshape(1, -1))[0]
    
    # D·ª± b√°o t·ªïng h·ª£p
    meta_input = np.array([[pred_lstm, pred_xgb]])
    final_pred = meta_model.predict(meta_input).flatten()[0]
    
    # T·∫°o d·ªØ li·ªáu d·ª± b√°o cho nhi·ªÅu ng√†y
    last_date = df['Date'].iloc[-1]
    forecast_dates = [last_date + timedelta(days=i) for i in range(1, days_to_predict+1)]
    forecast_prices = [final_pred * (1 + 0.002*i) for i in range(days_to_predict)]  # Gi·∫£ ƒë·ªãnh tƒÉng nh·∫π
    
    return df, forecast_dates, forecast_prices

# Giao di·ªán Streamlit
st.sidebar.header("T√πy ch·ªçn d·ª± b√°o")
stock_option = st.sidebar.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", ['FPT', 'CMG'])
days_to_predict = st.sidebar.slider("S·ªë ng√†y d·ª± b√°o", 1, 30, 7)

if st.sidebar.button("D·ª± b√°o gi√°"):
    with st.spinner(f'ƒêang d·ª± b√°o gi√° {stock_option}...'):
        try:
            historical_data, forecast_dates, forecast_prices = predict_stock_price(stock_option, days_to_predict)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.subheader(f"K·∫øt qu·∫£ d·ª± b√°o cho {stock_option}")
            
            # T·∫°o DataFrame cho d·ªØ li·ªáu d·ª± b√°o
            forecast_df = pd.DataFrame({
                'Ng√†y': forecast_dates,
                'Gi√° d·ª± b√°o (VND)': [round(price, 2) for price in forecast_prices]
            })
            
            # Hi·ªÉn th·ªã b·∫£ng d·ª± b√°o
            st.dataframe(forecast_df.style.format({
                'Gi√° d·ª± b√°o (VND)': '{:,.2f}'
            }), use_container_width=True)
            
            # V·∫Ω bi·ªÉu ƒë·ªì
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # D·ªØ li·ªáu l·ªãch s·ª≠
            ax.plot(historical_data['Date'][-30:], historical_data['Closing Price'][-30:], 
                    label='Gi√° l·ªãch s·ª≠', color='blue', marker='o')
            
            # D·ªØ li·ªáu d·ª± b√°o
            ax.plot(forecast_dates, forecast_prices, 
                    label='Gi√° d·ª± b√°o', color='red', linestyle='--', marker='x')
            
            ax.set_title(f'Di·ªÖn bi·∫øn gi√° v√† d·ª± b√°o {stock_option}')
            ax.set_xlabel('Ng√†y')
            ax.set_ylabel('Gi√° (VND)')
            ax.legend()
            ax.grid(True)
            
            st.pyplot(fig)
            
            # Hi·ªÉn th·ªã th√¥ng tin th·ªëng k√™
            st.subheader("Th·ªëng k√™ gi√° g·∫ßn ƒë√¢y")
            col1, col2, col3 = st.columns(3)
            
            last_price = historical_data['Closing Price'].iloc[-1]
            min_30d = historical_data['Closing Price'][-30:].min()
            max_30d = historical_data['Closing Price'][-30:].max()
            
            col1.metric("Gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t", f"{last_price:,.2f} VND")
            col2.metric("Gi√° th·∫•p nh·∫•t 30 ng√†y", f"{min_30d:,.2f} VND")
            col3.metric("Gi√° cao nh·∫•t 30 ng√†y", f"{max_30d:,.2f} VND")
            
        except Exception as e:
            st.error(f"C√≥ l·ªói x·∫£y ra: {str(e)}")

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ m√¥ h√¨nh
st.sidebar.markdown("---")
st.sidebar.subheader("Th√¥ng tin m√¥ h√¨nh")
st.sidebar.markdown("""
- **M√¥ h√¨nh k·∫øt h·ª£p**: LSTM + XGBoost
- **D·ªØ li·ªáu s·ª≠ d·ª•ng**:
  - Gi√° l·ªãch s·ª≠
  - Kh·ªëi l∆∞·ª£ng giao d·ªãch
  - S·ª± ki·ªán c·ªï t·ª©c
  - S·ª± ki·ªán ƒë·∫°i h·ªôi c·ªï ƒë√¥ng
  - Ch·ªâ s·ªë t√†i ch√≠nh
""")

# H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
st.expander("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng").markdown("""
1. Ch·ªçn m√£ c·ªï phi·∫øu c·∫ßn d·ª± b√°o (FPT ho·∫∑c CMG)
2. Ch·ªçn s·ªë ng√†y mu·ªën d·ª± b√°o (t·ª´ 1 ƒë·∫øn 30 ng√†y)
3. Nh·∫•n n√∫t "D·ª± b√°o gi√°" ƒë·ªÉ xem k·∫øt qu·∫£
4. K·∫øt qu·∫£ bao g·ªìm:
   - B·∫£ng gi√° d·ª± b√°o chi ti·∫øt
   - Bi·ªÉu ƒë·ªì so s√°nh gi√° l·ªãch s·ª≠ v√† gi√° d·ª± b√°o
   - C√°c th·ªëng k√™ gi√° g·∫ßn ƒë√¢y
""")