import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam
import xgboost as xgb
import joblib
import os
from datetime import datetime, timedelta

# Thi·∫øt l·∫≠p trang Streamlit
st.set_page_config(page_title="D·ª± B√°o Gi√° C·ªï Phi·∫øu CMG", page_icon="üìà", layout="wide")

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üìà H·ªá Th·ªëng D·ª± B√°o Gi√° C·ªï Phi·∫øu CMG")
st.markdown("**K·∫øt h·ª£p ph√¢n t√≠ch k·ªπ thu·∫≠t v√† c∆° b·∫£n ƒë·ªÉ d·ª± b√°o gi√° c·ªï phi·∫øu v·ªõi ƒë√°nh gi√° ƒë·ªô tin c·∫≠y**")

# Sidebar cho l·ª±a ch·ªçn th√¥ng s·ªë
with st.sidebar:
    st.header("C·∫•u h√¨nh D·ª± B√°o")
    stock_choice = "CMG"  # Fixed to CMG for now
    forecast_days = st.slider("S·ªë ng√†y d·ª± b√°o", 1, 30, 7)
    confidence_threshold = st.slider("Ng∆∞·ª°ng tin c·∫≠y t·ªëi thi·ªÉu (%)", 50, 95, 70)
    st.markdown("---")
    st.info("H·ªá th·ªëng s·ª≠ d·ª•ng m√¥ h√¨nh hybrid k·∫øt h·ª£p: LSTM, XGBoost, v√† Meta-model.")

# H√†m t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu
@st.cache_data
def load_stock_data(stock_id):
    try:
        # Load main transaction data
        df = pd.read_csv("4.2.3 (TARGET) (live & his) CMG_detail_transactions_processed.csv")
        df = df[df['StockID'] == stock_id].copy()
        df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
        df = df.sort_values('Date')
        df['Closing Price'] = df['Closing Price'].str.replace(',', '').astype(float)
        df['Total Volume'] = df['Total Volume'].str.replace(',', '').astype(float)

        # Create features
        df['Return%'] = df['Closing Price'].pct_change() * 100
        df['MA5'] = df['Closing Price'].rolling(window=5).mean()
        df['MA10'] = df['Closing Price'].rolling(window=10).mean()
        df['Volume_ratio'] = df['Total Volume'] / df['Total Volume'].rolling(5).mean()
        df['Volatility'] = df['Closing Price'].pct_change().rolling(window=5).std() * 100
        df['Price_Momentum'] = df['Closing Price'].diff(5)

        # Load event data
        df_dividend = pd.read_csv("3.2 (live & his) news_dividend_issue (FPT_CMG)_processed.csv")
        df_meeting = pd.read_csv("3.3 (live & his) news_shareholder_meeting (FPT_CMG)_processed.csv")
        df_dividend = df_dividend[df_dividend['StockID'] == stock_id].copy()
        df_meeting = df_meeting[df_meeting['StockID'] == stock_id].copy()
        df_dividend['Execution Date'] = pd.to_datetime(df_dividend['Execution Date'], format='%d/%m/%Y', errors='coerce')
        df_meeting['Execution Date'] = pd.to_datetime(df_meeting['Execution Date'], format='%d/%m/%Y')
        df['Dividend_Event'] = df['Date'].isin(df_dividend['Execution Date']).astype(int)
        df['Meeting_Event'] = df['Date'].isin(df_meeting['Execution Date']).astype(int)

        # Load financial data
        df_financial = pd.read_csv("6.5 (his) financialreport_metrics_Nh√≥m ng√†nh_C√¥ng ngh·ªá th√¥ng tin (of FPT_CMG)_processed.csv")
        def clean_financial_data(df_fin):
            df_fin['Indicator'] = df_fin['Indicator'].str.replace('\n', '', regex=False).str.replace(r'\s+', ' ', regex=True).str.strip()
            for col in df_fin.columns[3:]:
                df_fin[col] = df_fin[col].str.replace(',', '').astype(float, errors='ignore')
            return df_fin
        df_financial = clean_financial_data(df_financial)

        indicators = [
            'T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n V·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)%',
            'T·ª∑ l·ªá l√£i EBIT%',
            'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n gi√° tr·ªã s·ªï s√°ch (P/B)L·∫ßn',
            'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)L·∫ßn',
            'P/SL·∫ßn',
            'T·ª∑ su·∫•t sinh l·ª£i tr√™n v·ªën d√†i h·∫°n b√¨nh qu√¢n (ROCE)%',
            'Thu nh·∫≠p tr√™n m·ªói c·ªï ph·∫ßn (EPS)VNƒê'
        ]
        df_financial = df_financial[(df_financial['Stocks'].str.contains(stock_id)) & (df_financial['Indicator'].isin(indicators))].copy()
        quarters = ['Q1_2023', 'Q2_2023', 'Q3_2023', 'Q4_2023', 'Q1_2024', 'Q2_2024', 'Q3_2024', 'Q4_2024']
        df_financial_melted = df_financial.melt(id_vars=['Indicator'], value_vars=quarters, var_name='Quarter', value_name='Value')
        quarter_dates = {
            'Q1_2023': '2023-01-01', 'Q2_2023': '2023-04-01', 'Q3_2023': '2023-07-01', 'Q4_2023': '2023-10-01',
            'Q1_2024': '2024-01-01', 'Q2_2024': '2024-04-01', 'Q3_2024': '2024-07-01', 'Q4_2024': '2024-10-01'
        }
        df_financial_melted['Date'] = df_financial_melted['Quarter'].map(quarter_dates)
        df_financial_melted['Date'] = pd.to_datetime(df_financial_melted['Date'])
        df_financial_pivot = df_financial_melted.pivot(index='Date', columns='Indicator', values='Value')
        df = df.merge(df_financial_pivot, left_on='Date', right_index=True, how='left')
        df[indicators] = df[indicators].ffill()
        df = df.dropna().reset_index(drop=True)
        return df
    except FileNotFoundError:


        st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra t·ªáp CSV.")
        st.stop()


# H√†m t·∫£i m√¥ h√¨nh
@st.cache_resource
def load_models(stock_id):
    try:
        model_lstm = load_model(f"models/lstm_model_{stock_id}.h5")
        model_xgb = joblib.load(f"models/xgb_model_{stock_id}.joblib")
        meta_model = load_model(f"models/meta_model_{stock_id}.h5")
        return {'lstm': model_lstm, 'xgb': model_xgb, 'meta': meta_model}
    except FileNotFoundError:
        st.warning("M√¥ h√¨nh ch∆∞a t·ªìn t·∫°i. ƒêang hu·∫•n luy·ªán m√¥ h√¨nh m·ªõi...")
        df = load_stock_data(stock_id)
        model_lstm, model_xgb, meta_model, scaler = train_and_save_models(stock_id, df)
        return {'lstm': model_lstm, 'xgb': model_xgb, 'meta': meta_model}

# T·∫£i d·ªØ li·ªáu v√† m√¥ h√¨nh
df = load_stock_data(stock_choice)
models = load_models(stock_choice)
scaler = MinMaxScaler()  # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong h√†m d·ª± b√°o

# H√†m d·ª± b√°o gi√°
def forecast_prices(df, models, forecast_days, lookback=7):
    y_log = np.log1p(df['Closing Price'])
    scaler.fit(y_log.values.reshape(-1, 1))
    scaled_data = scaler.transform(y_log.values.reshape(-1, 1))
    last_data = scaled_data[-lookback:]
    X_lstm = last_data.reshape(1, lookback, 1)
    
    forecast_prices = []
    confidence_scores = []
    for _ in range(forecast_days):
        lstm_pred = models['lstm'].predict(X_lstm, verbose=0)
        lstm_pred_price = np.expm1(scaler.inverse_transform(lstm_pred))[0, 0]
        
        last_features = df.iloc[-1][['Return%', 'MA5', 'MA10', 'Volume_ratio', 'Dividend_Event', 'Meeting_Event', 'Volatility', 'Price_Momentum'] + [
            'T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n V·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)%',
            'T·ª∑ l·ªá l√£i EBIT%',
            'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n gi√° tr·ªã s·ªï s√°ch (P/B)L·∫ßn',
            'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)L·∫ßn',
            'P/SL·∫ßn',
            'T·ª∑ su·∫•t sinh l·ª£i tr√™n v·ªën d√†i h·∫°n b√¨nh qu√¢n (ROCE)%',
            'Thu nh·∫≠p tr√™n m·ªói c·ªï ph·∫ßn (EPS)VNƒê'
        ]].values.reshape(1, -1)
        xgb_pred = models['xgb'].predict(last_features)[0]
        
        meta_input = np.array([[lstm_pred_price, xgb_pred]])
        final_pred = models['meta'].predict(meta_input, verbose=0)[0, 0]
        final_pred = np.nan_to_num(final_pred, nan=df['Closing Price'].mean(), neginf=0)
        forecast_prices.append(max(final_pred, 0))  # Ensure non-negative
        
        # Calculate confidence (simplified, based on recent volatility)
        recent_volatility = df['Volatility'].iloc[-10:].mean()
        confidence = max(50, 100 - recent_volatility * 5 + np.random.normal(0, 5))
        confidence_scores.append(confidence)
        
        # Update input for next prediction
        new_data_point = np.append(last_data[1:], lstm_pred)
        X_lstm = new_data_point.reshape(1, lookback, 1)
    
    forecast_dates = [df['Date'].iloc[-1] + timedelta(days=i) for i in range(1, forecast_days+1)]
    return forecast_dates, forecast_prices, confidence_scores

# Tab ch√≠nh
tab1, tab2, tab3 = st.tabs(["üìä D·ªØ Li·ªáu & Ph√¢n T√≠ch", "üîÆ D·ª± B√°o Gi√°", "üìå ƒê·ªÅ Xu·∫•t Giao D·ªãch"])

with tab1:
    st.header(f"Ph√¢n T√≠ch C·ªï Phi·∫øu {stock_choice}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Bi·ªÉu ƒê·ªì Gi√°")
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df['Date'], y=df['Closing Price'], name='Gi√° ƒë√≥ng c·ª≠a', line=dict(color='blue')))
        fig.add_trace(go.Scatter(x=df['Date'], y=df['MA5'], name='MA5', line=dict(color='orange', width=1)))
        fig.add_trace(go.Scatter(x=df['Date'], y=df['MA10'], name='MA10', line=dict(color='green', width=1)))
        fig.update_layout(height=400, xaxis_title='Ng√†y', yaxis_title='Gi√°')
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("Ch·ªâ S·ªë K·ªπ Thu·∫≠t")
        delta = df['Closing Price'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        ema12 = df['Closing Price'].ewm(span=12, adjust=False).mean()
        ema26 = df['Closing Price'].ewm(span=26, adjust=False).mean()
        macd = ema12 - ema26
        signal = macd.ewm(span=9, adjust=False).mean()
        
        st.metric("RSI (14 ng√†y)", f"{rsi.iloc[-1]:.2f}", 
                  "Mua qu√°" if rsi.iloc[-1] > 70 else "B√°n qu√°" if rsi.iloc[-1] < 30 else "B√¨nh th∆∞·ªùng")
        st.metric("MACD", f"{macd.iloc[-1]:.2f}", 
                  "TƒÉng" if macd.iloc[-1] > signal.iloc[-1] else "Gi·∫£m")
        st.metric("Kh·ªëi l∆∞·ª£ng giao d·ªãch", f"{df['Total Volume'].iloc[-1]:,.0f}")
        trend = "TƒÉng" if df['Closing Price'].iloc[-1] > df['Closing Price'].iloc[-5] else "Gi·∫£m"
        st.metric("Xu h∆∞·ªõng ng·∫Øn h·∫°n", trend)

with tab2:
    st.header(f"D·ª± B√°o Gi√° {stock_choice}")
    
    forecast_dates, forecast_prices, confidence_scores = forecast_prices(df, models, forecast_days)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Bi·ªÉu ƒê·ªì D·ª± B√°o")
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df['Date'].iloc[-30:], 
            y=df['Closing Price'].iloc[-30:], 
            name='Gi√° l·ªãch s·ª≠',
            line=dict(color='blue')
        ))
        fig.add_trace(go.Scatter(
            x=forecast_dates,
            y=forecast_prices,
            name='D·ª± b√°o',
            line=dict(color='red', dash='dot')
        ))
        for i, (date, price, conf) in enumerate(zip(forecast_dates, forecast_prices, confidence_scores)):
            color = 'green' if conf >= confidence_threshold else 'orange' if conf >= 60 else 'red'
            fig.add_shape(type="line",
                x0=date, y0=price*0.98, x1=date, y1=price*1.02,
                line=dict(color=color, width=2)
            )
            if i % 3 == 0:
                fig.add_annotation(x=date, y=price*1.03,
                    text=f"{conf:.0f}%",
                    showarrow=False,
                    font=dict(size=10, color=color)
                )
        fig.update_layout(
            height=500,
            title=f"D·ª± b√°o gi√° {stock_choice} trong {forecast_days} ng√†y t·ªõi",
            xaxis_title="Ng√†y",
            yaxis_title="Gi√°",
            showlegend=True
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("Chi Ti·∫øt D·ª± B√°o")
        forecast_df = pd.DataFrame({
            'Ng√†y': forecast_dates,
            'Gi√° d·ª± b√°o': forecast_prices,
            'ƒê·ªô tin c·∫≠y (%)': confidence_scores,
            'Bi·∫øn ƒë·ªông (%)': [(p/df['Closing Price'].iloc[-1]-1)*100 for p in forecast_prices]
        })
        forecast_df['Gi√° d·ª± b√°o'] = forecast_df['Gi√° d·ª± b√°o'].apply(lambda x: f"{x:,.0f}")
        forecast_df['Bi·∫øn ƒë·ªông (%)'] = forecast_df['Bi·∫øn ƒë·ªông (%)'].apply(lambda x: f"{x:+.2f}%")
        forecast_df['ƒê·ªô tin c·∫≠y (%)'] = forecast_df['ƒê·ªô tin c·∫≠y (%)'].apply(lambda x: f"{x:.0f}%")
        
        def color_confidence(val):
            val = float(val.strip('%'))
            color = 'green' if val >= confidence_threshold else 'orange' if val >= 60 else 'red'
            return f'background-color: {color}; color: white'
        
        st.dataframe(
            forecast_df.style.applymap(color_confidence, subset=['ƒê·ªô tin c·∫≠y (%)']),
            hide_index=True,
            use_container_width=True
        )
        
        avg_confidence = np.mean(confidence_scores)
        max_change = max([abs(float(x.strip('%'))) for x in forecast_df['Bi·∫øn ƒë·ªông (%)']])
        st.metric("ƒê·ªô tin c·∫≠y trung b√¨nh", f"{avg_confidence:.1f}%")
        st.metric("Bi·∫øn ƒë·ªông t·ªëi ƒëa d·ª± ki·∫øn", f"{max_change:.2f}%")
        if avg_confidence >= confidence_threshold:
            st.success("‚úÖ D·ª± b√°o c√≥ ƒë·ªô tin c·∫≠y cao, c√≥ th·ªÉ c√¢n nh·∫Øc s·ª≠ d·ª•ng")
        elif avg_confidence >= 60:
            st.warning("‚ö†Ô∏è D·ª± b√°o c√≥ ƒë·ªô tin c·∫≠y trung b√¨nh, c·∫ßn th·∫≠n tr·ªçng")
        else:
            st.error("‚ùå D·ª± b√°o c√≥ ƒë·ªô tin c·∫≠y th·∫•p, kh√¥ng n√™n s·ª≠ d·ª•ng")

with tab3:
    st.header(f"ƒê·ªÅ Xu·∫•t Giao D·ªãch {stock_choice}")
    
    current_price = df['Closing Price'].iloc[-1]
    ma5 = df['MA5'].iloc[-1]
    ma10 = df['MA10'].iloc[-1]
    rsi_value = rsi.iloc[-1]
    
    recommendation = "Gi·ªØ"
    confidence = 70
    reasoning = []
    
    # Incorporate model prediction
    forecast_trend = forecast_prices[-1] > current_price
    if forecast_trend:
        reasoning.append("M√¥ h√¨nh d·ª± b√°o xu h∆∞·ªõng tƒÉng trong ng·∫Øn h·∫°n")
    else:
        reasoning.append("M√¥ h√¨nh d·ª± b√°o xu h∆∞·ªõng gi·∫£m trong ng·∫Øn h·∫°n")
    
    if current_price > ma5 > ma10:
        recommendation = "Mua"
        confidence = 80
        reasoning.append("Gi√° v∆∞·ª£t tr√™n c·∫£ MA5 v√† MA10 - xu h∆∞·ªõng tƒÉng ng·∫Øn h·∫°n")
    elif current_price < ma5 < ma10:
        recommendation = "B√°n"
        confidence = 75
        reasoning.append("Gi√° d∆∞·ªõi c·∫£ MA5 v√† MA10 - xu h∆∞·ªõng gi·∫£m ng·∫Øn h·∫°n")
    
    if rsi_value < 30:
        recommendation = "Mua m·∫°nh" if recommendation == "Mua" else "Mua"
        confidence = min(95, confidence + 15)
        reasoning.append("RSI d∆∞·ªõi 30 - c·ªï phi·∫øu b·ªã b√°n qu√° m·ª©c")
    elif rsi_value > 70:
        recommendation = "B√°n m·∫°nh" if recommendation == "B√°n" else "B√°n"
        confidence = min(95, confidence + 15)
        reasoning.append("RSI tr√™n 70 - c·ªï phi·∫øu mua qu√° m·ª©c")
    
    if df['Dividend_Event'].iloc[-5:].sum() > 0:
        reasoning.append("C√≥ s·ª± ki·ªán c·ªï t·ª©c g·∫ßn ƒë√¢y - th∆∞·ªùng t·∫°o bi·∫øn ƒë·ªông gi√°")
    if df['Meeting_Event'].iloc[-5:].sum() > 0:
        reasoning.append("C√≥ s·ª± ki·ªán h·ªçp c·ªï ƒë√¥ng g·∫ßn ƒë√¢y - c·∫ßn theo d√µi th√¥ng tin")
    
    col1, col2 = st.columns([1, 3])
    
    with col1:
        st.subheader("Khuy·∫øn Ngh·ªã")
        if recommendation.startswith("Mua"):
            st.success(f"### {recommendation}")
        elif recommendation.startswith("B√°n"):
            st.error(f"### {recommendation}")
        else:
            st.info(f"### {recommendation}")
        
        st.metric("ƒê·ªô tin c·∫≠y", f"{confidence}%")
        st.metric("Gi√° hi·ªán t·∫°i", f"{current_price:,.0f}")
        
        # Volatility-based stop-loss/take-profit
        atr = df['Closing Price'].diff().abs().rolling(window=14).mean().iloc[-1]
        if recommendation.startswith("Mua"):
            entry = current_price * 0.99
            stop_loss = current_price - 2 * atr
            take_profit = current_price + 3 * atr
        elif recommendation.startswith("B√°n"):
            entry = current_price * 1.01
            stop_loss = current_price + 2 * atr
            take_profit = current_price - 3 * atr
        else:
            entry = current_price
            stop_loss = current_price - 1.5 * atr
            take_profit = current_price + 1.5 * atr
        
        st.metric("ƒêi·ªÉm v√†o l·ªánh", f"{entry:,.0f}")
        st.metric("C·∫Øt l·ªó", f"{stop_loss:,.0f}", delta=f"{(stop_loss/current_price-1)*100:+.1f}%")
        st.metric("Ch·ªët l·ªùi", f"{take_profit:,.0f}", delta=f"{(take_profit/current_price-1)*100:+.1f}%")
    
    with col2:
        st.subheader("Ph√¢n T√≠ch Chi Ti·∫øt")
        st.write("**C∆° s·ªü ƒë·ªÅ xu·∫•t:**")
        for reason in reasoning:
            st.write(f"- {reason}")
        
        st.write("**Ch·ªâ s·ªë quan tr·ªçng:**")
        cols = st.columns(4)
        with cols[0]:
            st.metric("P/E", f"{df['Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)L·∫ßn'].iloc[-1]:.1f}")
        with cols[1]:
            st.metric("ROE", f"{df['T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n V·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)%'].iloc[-1]:.1f}%")
        with cols[2]:
            st.metric("EPS", f"{df['Thu nh·∫≠p tr√™n m·ªói c·ªï ph·∫ßn (EPS)VNƒê'].iloc[-1]:,.0f}")
        with cols[3]:
            st.metric("Volume Ratio", f"{df['Volume_ratio'].iloc[-1]:.2f}")
        
        st.warning("**C·∫£nh b√°o r·ªßi ro:**")
        st.write("""
        - D·ª± b√°o kh√¥ng ƒë·∫£m b·∫£o ch√≠nh x√°c 100%
        - Th·ªã tr∆∞·ªùng c√≥ th·ªÉ bi·∫øn ƒë·ªông do y·∫øu t·ªë vƒ© m√¥
        - Lu√¥n s·ª≠ d·ª•ng l·ªánh c·∫Øt l·ªó ƒë·ªÉ qu·∫£n l√Ω r·ªßi ro
        - C√¢n nh·∫Øc ƒëa d·∫°ng h√≥a danh m·ª•c ƒë·∫ßu t∆∞
        """)

# Hi·ªÉn th·ªã ƒë√°nh gi√° m√¥ h√¨nh
st.header("ƒê√°nh Gi√° M√¥ h√¨nh")
y_log = np.log1p(df['Closing Price'])
scaler.fit(y_log.values.reshape(-1, 1))
scaled_data = scaler.transform(y_log.values.reshape(-1, 1))
X_lstm = []
for i in range(lookback, len(scaled_data)):
    X_lstm.append(scaled_data[i - lookback:i, 0])
X_lstm = np.array(X_lstm)
X_lstm = np.reshape(X_lstm, (X_lstm.shape[0], X_lstm.shape[1], 1))
X_xgb = df[['Return%', 'MA5', 'MA10', 'Volume_ratio', 'Dividend_Event', 'Meeting_Event', 'Volatility', 'Price_Momentum'] + [
    'T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n V·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)%',
    'T·ª∑ l·ªá l√£i EBIT%',
    'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n gi√° tr·ªã s·ªï s√°ch (P/B)L·∫ßn',
    'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)L·∫ßn',
    'P/SL·∫ßn',
    'T·ª∑ su·∫•t sinh l·ª£i tr√™n v·ªën d√†i h·∫°n b√¨nh qu√¢n (ROCE)%',
    'Thu nh·∫≠p tr√™n m·ªói c·ªï ph·∫ßn (EPS)VNƒê'
]].iloc[lookback:].reset_index(drop=True)
y = df['Closing Price'].iloc[lookback:].reset_index(drop=True)
mask = ~(X_xgb.isna().any(axis=1) | y.isna())
X_xgb, y, X_lstm = X_xgb[mask], y[mask], X_lstm[mask]
split = int(len(y) * 0.8)
X_lstm_test = X_lstm[split:]
X_xgb_test = X_xgb[split:]
y_test = y[split:]
pred_lstm_test = np.expm1(scaler.inverse_transform(models['lstm'].predict(X_lstm_test, verbose=0))).flatten()
pred_xgb_test = models['xgb'].predict(X_xgb_test)
X_meta_test = np.vstack((pred_lstm_test, pred_xgb_test)).T
y_pred = models['meta'].predict(X_meta_test, verbose=0).flatten()
y_pred = np.nan_to_num(y_pred, nan=y.mean(), neginf=0)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)
st.metric("MAE", f"{mae:.2f}")
st.metric("RMSE", f"{rmse:.2f}")
st.metric("R¬≤", f"{r2:.4f}")

# Footer
st.markdown("---")
st.markdown("""
**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
1. Ch·ªçn s·ªë ng√†y d·ª± b√°o v√† ng∆∞·ª°ng tin c·∫≠y ·ªü sidebar
2. Xem ph√¢n t√≠ch k·ªπ thu·∫≠t v√† c∆° b·∫£n ·ªü tab ƒë·∫ßu ti√™n
3. Ki·ªÉm tra d·ª± b√°o gi√° v√† ƒë·ªô tin c·∫≠y ·ªü tab th·ª© hai
4. Tham kh·∫£o ƒë·ªÅ xu·∫•t giao d·ªãch ·ªü tab cu·ªëi c√πng
""")