import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import re
from utils.data_loader import load_data, clean_data
from utils.visualization import create_growth_chart, create_bar_chart

# Ti√™u ƒë·ªÅ trang
st.markdown(
    """
    <div style='text-align: center; border-bottom: 1px solid #ccc; padding-bottom: 10px;'>
        <div style='font-size: 2.8rem; font-weight: 900; color: #FD6200;'>DABFIN</div> 
        <div style='font-size: 2.5rem; font-weight: 900; color: #0E6994;'>PH√ÇN T√çCH T√ÄI CH√çNH DOANH NGHI·ªÜP</div>
    </div>
    """,
    unsafe_allow_html=True)
# T·∫£i d·ªØ li·ªáu
df = load_data("6.2 (his) financialreport_metrics_FPT_CMG_processed.csv")
df_long = clean_data(df)

# L·ªçc d·ªØ li·ªáu theo c√¥ng ty
company = st.selectbox("Ch·ªçn c√¥ng ty", df_long['StockID'].unique(), index=0)
df_company = df_long[df_long['StockID'] == company]

# Nh√≥m ch·ªâ s·ªë
indicator_groups = {
    'T·∫•t c·∫£ c√°c ch·ªâ s·ªë': [],
    'Kh·∫£ nƒÉng sinh l·ªùi': [
        'T·ª∑ su·∫•t sinh l·ª£i tr√™n t·ªïng t√†i s·∫£n b√¨nh qu√¢n (ROAA)',
        'T·ª∑ su·∫•t l·ª£i nhu·∫≠n tr√™n v·ªën ch·ªß s·ªü h·ªØu b√¨nh qu√¢n (ROEA)',
        'T·ª∑ su·∫•t l·ª£i nhu·∫≠n g·ªôp bi√™n',
        'T·ª∑ su·∫•t sinh l·ª£i tr√™n doanh thu thu·∫ßn'
    ],
    'Kh·∫£ nƒÉng thanh to√°n': [
        'T·ª∑ s·ªë thanh to√°n hi·ªán h√†nh (ng·∫Øn h·∫°n)',
        'T·ª∑ s·ªë thanh to√°n nhanh',
        'T·ª∑ s·ªë thanh to√°n b·∫±ng ti·ªÅn m·∫∑t'
    ],
    'ƒê√≤n b·∫©y t√†i ch√≠nh': [
        'T·ª∑ s·ªë N·ª£ tr√™n T·ªïng t√†i s·∫£n',
        'T·ª∑ s·ªë N·ª£ tr√™n V·ªën ch·ªß s·ªü h·ªØu'
    ],
    'Hi·ªáu qu·∫£ ho·∫°t ƒë·ªông': [
        'V√≤ng quay t·ªïng t√†i s·∫£n (Hi·ªáu su·∫•t s·ª≠ d·ª•ng to√†n b·ªô t√†i s·∫£n)',
        'V√≤ng quay h√†ng t·ªìn kho',
        'V√≤ng quay ph·∫£i thu kh√°ch h√†ng'
    ],
    'Ch·ªâ s·ªë th·ªã tr∆∞·ªùng': [
        'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n thu nh·∫≠p (P/E)',
        'Ch·ªâ s·ªë gi√° th·ªã tr∆∞·ªùng tr√™n gi√° tr·ªã s·ªï s√°ch (P/B)',
        'Beta'
    ]
}

# Ch·ªçn nh√≥m ch·ªâ s·ªë
selected_group = st.selectbox("Ch·ªçn nh√≥m ch·ªâ s·ªë", list(indicator_groups.keys()))

# L·ªçc ch·ªâ s·ªë theo nh√≥m ƒë√£ ch·ªçn
if selected_group == 'T·∫•t c·∫£ c√°c ch·ªâ s·ªë':
    available_indicators = df_company['Indicator'].unique()
else:
    available_indicators = [ind for ind in df_company['Indicator'].unique() 
                           if any(g in ind for g in indicator_groups[selected_group])]

# Ch·ªçn ch·ªâ s·ªë c·ª• th·ªÉ
selected_indicators = st.multiselect(
    "Ch·ªçn ch·ªâ s·ªë mu·ªën ph√¢n t√≠ch",
    available_indicators,
    default=available_indicators[:min(4, len(available_indicators))]
)

# T·∫°o tab cho c√°c lo·∫°i bi·ªÉu ƒë·ªì
tab1, tab2, tab3 = st.tabs(["Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng", "Bi·ªÉu ƒë·ªì c·ªôt", "TƒÉng tr∆∞·ªüng k·∫øt h·ª£p"])

with tab1:
    if selected_indicators:
        fig_line = create_growth_chart(df_company, selected_indicators, company)
        st.plotly_chart(fig_line, use_container_width=True)
    else:
        st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.")

with tab2:
    if selected_indicators:
        period = st.selectbox("Ch·ªçn k·ª≥ b√°o c√°o", df_company['Period'].unique())
        fig_bar = create_bar_chart(df_company, selected_indicators, company, period)
        st.plotly_chart(fig_bar, use_container_width=True)
    else:
        st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.")
with tab3:
    if len(selected_indicators) >= 2:
        st.subheader("üîç So s√°nh T·ªëc ƒë·ªô TƒÉng tr∆∞·ªüng")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            base_period = st.selectbox(
                "Ch·ªçn k·ª≥ l√†m m·ªëc", 
                df_company['Period'].unique(),
                index=len(df_company['Period'].unique())-4,
                key='base_period_select'
            )
        with col2:
            show_values = st.checkbox("Hi·ªÉn th·ªã gi√° tr·ªã", value=True)
        
        # T√≠nh to√°n tƒÉng tr∆∞·ªüng
        @st.cache_data
        def calculate_growth(df, indicators, base_period):
            growth_data = []
            for indicator in indicators:
                df_ind = df[df['Indicator'] == indicator]
                base_value = df_ind[df_ind['Period'] == base_period]['Value'].values[0]
                
                for _, row in df_ind.iterrows():
                    growth = (row['Value'] - base_value) / base_value * 100 if base_value != 0 else 0
                    growth_data.append({
                        'Indicator': row['Indicator'].split('\n')[0],  # B·ªè ƒë∆°n v·ªã trong t√™n ch·ªâ s·ªë
                        'Period': row['Period'],
                        'Growth (%)': growth,
                        'Value': row['Value']  # Gi·ªØ l·∫°i gi√° tr·ªã g·ªëc ƒë·ªÉ hi·ªÉn th·ªã
                    })
            return pd.DataFrame(growth_data)
        
        df_growth = calculate_growth(df_company, selected_indicators, base_period)
        
        # T·∫°o bi·ªÉu ƒë·ªì
        fig_growth = px.line(
            df_growth,
            x='Period',
            y='Growth (%)',
            color='Indicator',
            title=f'üìà T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng so v·ªõi k·ª≥ {base_period}',
            markers=True,
            hover_data=['Value'],
            height=500
        )
        
        # Hi·ªÉn th·ªã gi√° tr·ªã tr√™n bi·ªÉu ƒë·ªì n·∫øu ƒë∆∞·ª£c ch·ªçn
        if show_values:
            fig_growth.update_traces(
                text=df_growth['Growth (%)'].round(2).astype(str) + '%',
                textposition='top center',
                textfont=dict(size=10)
            )
        
        # C·∫£i ti·∫øn layout
        fig_growth.update_layout(
            hovermode='x unified',
            yaxis_title='TƒÉng tr∆∞·ªüng (%)',
            legend_title='Ch·ªâ s·ªë',
            legend=dict(
                orientation='h',
                yanchor='bottom',
                y=-0.5,
                xanchor='center',
                x=0.5,
                font=dict(size=10)
            ),
            margin=dict(l=50, r=50, t=80, b=120),
            xaxis=dict(tickangle=-45),
            hoverlabel=dict(
                bgcolor='white',
                font_size=12,
                font_family='Arial'
            )
        )
        
        # Th√™m ƒë∆∞·ªùng zero ƒë·ªÉ d·ªÖ so s√°nh
        fig_growth.add_hline(
            y=0, 
            line_dash='dot', 
            line_color='gray',
            annotation_text=f"M·ªëc {base_period}", 
            annotation_position='bottom right'
        )
        
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        st.plotly_chart(fig_growth, use_container_width=True)
        
        # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
        with st.expander("üìä Xem d·ªØ li·ªáu chi ti·∫øt"):
    # T·∫°o danh s√°ch period theo ƒë√∫ng th·ª© t·ª± th·ªùi gian
            period_order = [
        'Q1_2023', 'Q2_2023', 'Q3_2023', 'Q4_2023',
        'Q1_2024', 'Q2_2024', 'Q3_2024', 'Q4_2024'
    ]
    
    # L·ªçc ch·ªâ nh·ªØng period c√≥ trong d·ªØ li·ªáu
        available_periods = [p for p in period_order if p in df_growth['Period'].unique()]
    
    # T·∫°o pivot table v√† s·∫Øp x·∫øp c·ªôt theo th·ª© t·ª± th·ªùi gian
        pivot_df = df_growth.pivot_table(
            index='Indicator',
            columns='Period',
            values='Growth (%)',
            aggfunc='first'
        )[available_periods]  # Ch·ªâ l·∫•y c√°c c·ªôt c√≥ trong d·ªØ li·ªáu v√† s·∫Øp x·∫øp ƒë√∫ng th·ª© t·ª±
    
    # ƒê·ªãnh d·∫°ng v√† hi·ªÉn th·ªã b·∫£ng
        st.dataframe(
            pivot_df.style.format('{:.2f}%')
                    .background_gradient(cmap='RdYlGn', axis=1)
                    .set_properties(**{
                        'text-align': 'center',
                        'font-size': '12px'
                    }),
            use_container_width=True,
        )        
     # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao
    else:
        st.warning("‚ö†Ô∏è C·∫ßn ch·ªçn √≠t nh·∫•t 2 ch·ªâ s·ªë ƒë·ªÉ so s√°nh t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng.")
        st.info("‚ÑπÔ∏è Vui l√≤ng ch·ªçn th√™m ch·ªâ s·ªë t·ª´ danh s√°ch b√™n tr√™n")